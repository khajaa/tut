#navi(CSharp)
**IO, File, Directory
#contents
***Text File IO

 using System.IO;

Sample1
 StreamReader sr = new StreamReader(args[1]);
 string buf = "";
 while ((buf = sr.ReadLine()) != null) {
	Console.WriteLine(buf);
 }

Sample2
 StreamReader sr = new StreamReader(@"C:\test.txt", System.Text.Encoding.GetEncoding("shift-jis"));
 string str = "";
 while (sr.Peek() > -1) {
	str += sr.ReadLine() + "\r\n"; // or use sr.ReadToEnd();
 }
 sr.Close();

Write
 // true for appending
 StreamWriter sw = new StreamWriter(@"C:\test.txt", false,
 			System.Text.Encoding.GetEncoding("utf-8"));
 sw.WriteLine("This is one line");
 sw.Close();

:Note|Encoding is optional. Default is utf-8.


***Set stdout to file
Set stdout to file descriptor
 System.IO.StreamWriter sw = new System.IO.StreamWriter("C:\\test.txt");
 sw.AutoFlush = true;
 // thread safe wrapper
 System.IO.TextWriter tw = System.IO.TextWriter.Synchronized(sw);
 Console.SetOut(tw);

Bring back to console
 System.IO.StreamWriter standard = new System.IO.StreamWriter(Console.OpenStandardOutput());
 standard.AutoFlush = true;
 Console.SetOut(standard);

Useful function examples
 public static StreamWriter SetLogDescriptor() {
	// Set All Console Output to Log.txt
	StreamWriter stream = new StreamWriter("Log.txt");
	stream.AutoFlush = true;
	Console.SetOut(TextWriter.Synchronized(stream));
	return stream;
 }

 // Clean Up
 public static void SetConsoleDescriptor(StreamWriter stream) {
	// Back to console
	stream.Close();
	StreamWriter sw = new StreamWriter(Console.OpenStandardOutput());
	sw.AutoFlush = true;
	Console.SetOut(sw);
 }


***File Size
 System.IO.FileInfo fi = new System.IO.FileInfo(filepath);
 fi.Length();

***Directory List
This is example to get directory name recursively
 using System;
 using System.IO;
 namespace LIU {
	public class PrintDirectory {
		public static void Print(string path) {
			if (Directory.Exists(path)) {
				string[] dirList = Directory.GetDirectories(path);
				foreach (string dir in dirList) {
					Console.WriteLine(dir);
					Print(dir);
				}
			}
		}
	}
 }

***File List
 Directory.GetFiles(@"C:\", "*.log");


***Get Special Directory
 Environment.GetFolderPath(Environment.SpecialFolder.Startup);

***Select Folder
 FolderBrowserDialog fbd = new FolderBrowserDialog();
 fbd.Description = "Select a folder";
 fbd.RootFolder = Environment.SpecialFolder.Desktop;
 fbd.SelectedPath = @"C:\";
 fbd.ShowNewFolderButton = true;
 if (fbd.ShowDialog(this) == DialogResult.OK) {
     MessageBox.Show(fbd.SelectedPath);
 }

***Open File Dialog
 OpenFileDialog of = new	OpenFileDialog();
 of.Filter = "BMP(*.bmp)|*.bmp|All File Types(*.*)|*.*";
 of.RestoreDirectory = true;
 string path = "";
 if (of.ShowDialog() == DialogResult.OK) {
	path = of.FileName;
 }

***Save File Dialog 
:Warning|This is not thread safe!

 SaveFileDialog sfd = new SaveFileDialog();
 sfd.FileName = "NewFile.txt";
 sfd.InitialDirectory = @"C:\";
 sfd.Filter =
 	"Text File(*.txt;*.log)|*.txt;*.log|All Files(*.*)|*.*";
 sfd.FilterIndex = 1;
 sfd.Title = "Save File As";
 sfd.RestoreDirectory = true;
 sfd.OverwritePrompt = true;
 sfd.CheckPathExists = true;
 if (sfd.ShowDialog() == DialogResult.OK) {
 	//Console.WriteLine(sfd.FileName);
 }

***Extension
 // Extension Fixer useful with SaveFileDialog
 // using System.IO;
 if (Path.GetExtension(mDestFile) != ".sql") {
 	if (!Path.HasExtension(mDestFile)) {
 		mDestFile += ".sql";
 	}
 	else {
 		mDestFile = Path.ChangeExtension(mDestFile, ".sql");
 	}
 }
 


***Folder Browser Dialog - select directory
 FolderBrowserDialog fbd = new FolderBrowserDialog();
 fbd.Description = "Select a destination folder";
 fbd.RootFolder = Environment.SpecialFolder.Desktop;
 fbd.SelectedPath = @"C:\";
 fbd.ShowNewFolderButton = true;
 if (fbd.ShowDialog() == DialogResult.OK) {
	textBox1.Text = fbd.SelectedPath;
 }

***Shortcut
+Add Reference -> Windows Script Host Object Model -> Select

 using IWshRuntimeLibrary;

 WshShell shell = new WshShell();
 IWshShortcut link = (IWshShortcut)shell.CreateShortcut(@"c:\test.lnk");
 link.TargetPath = @"C:\mydir\myprog.exe";
 link.Save();

Set
 link.WorkingDirectory = @"C:\mydir";
to preserve all relative path

***Path Operation
Everything is in System.IO.Path class.
e.g.
 Path.GetFileName(path);
 Path.Combine(path, fileName);
 Path.ChangeExtention(path, ext);

etc...

***Open File with related extention
 using System.Diagnostics;
 Process p = Process.Start(@"C:\test.txt");
 // Wait
 p.WaitForExit(); 
 // or if you do not wait
 p.EnableRaisingEvents = true;
 p.Exited += new EventHandler(procOnExit);
 // and create a method to handle this event
 private void procOnExit(object sender, EventArgs e) {
    MessageBox.Show("Finished");
 }

***Executable Path - Path of itself (exe path)
Use
 Application.ExecutablePath
If you need something within the same directory
 Path.Combine(Path.GetDirectoryName(Application.ExecutablePath), "input.txt");

Application is under
 System.Windows.Forms

or
 System.Reflection.Assembly.GetExecutingAssembly().Location;

***Temp File Path
 Path.GetTempFileName();
#navi(CSharp)

